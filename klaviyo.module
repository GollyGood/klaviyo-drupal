<?php

/**
 * @file
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function klaviyo_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  $entity_type = !empty($form['instance']['entity_type']['#value']) ? $form['instance']['entity_type']['#value'] : '';
  $bundle = !empty($form['instance']['bundle']['#value']) ? $form['instance']['bundle']['#value'] : '';
  if (KlaviyoAdapter::getInstance()->isFieldMappable($entity_type, $bundle, $form['#field']['type'])) {
    $form['klaviyo'] = array(
     '#type' => 'fieldset',
     '#title' => t('Klaviyo'),
     '#tree' => TRUE,
    );

    $attributes = variable_get('klaviyo_person_attributes_user', array());
    $default_value = !empty($attributes[$form['#field']['field_name']]) ? $attributes[$form['#field']['field_name']] : '_none';
    $form['klaviyo']['person_attribute'] = array(
      '#type' => 'select_or_other',
      '#title' => t('Attribute'),
      '#other' => t('Custom'),
      '#default_value' => $default_value,
      '#options' => array(
        '_none' => t('Not used'),
      ) + klaviyo_get_person_attribute_map_options($form['#field']['field_name']),
      '#description' => t('Select the attribute for which this field should map in Klaviyo, if any.'),
    );

    $form['#validate'][] = 'klaviyo_form_field_ui_field_edit_form_validate';
    $form['#submit'][] = 'klaviyo_form_field_ui_field_edit_form_submit';
  }
}

/**
 * Retrieve an array of person attribute options for a specific field.
 *
 * @param string $field_name
 *   The field for which to retrieve the field options.
 * @param string $default_attribute
 *   The default attribute to add to the options array.
 *
 * @return array
 *    An array of key => value pair options to be used with a Drupal FAPI field
 *    element.
 */
function klaviyo_get_person_attribute_map_options($field_name, $default_attribute = '') {
  $attributes = variable_get('klaviyo_person_attributes_user', array());

  if (isset($attributes[$field_name])) {
    $default_attribute = $attributes[$field_name];
  }

  $mappable_attribute_keys = KlaviyoAdapter::getInstance()->getPersonGetMappableKeys();
  $attributes = array_diff(drupal_map_assoc($mappable_attribute_keys), $attributes);
  if (!empty($default_attribute)) {
    $attributes[$default_attribute] = $default_attribute;
  }

  return $attributes;
}

function klaviyo_form_field_ui_field_edit_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['klaviyo']['person_attribute']) && $attribute_key = $values['klaviyo']['person_attribute']) {
    // @todo: Check that it is not already used.
    // @todo: Check that it is a clean string < 125 chars (or max variable size?).
  }
}

function klaviyo_form_field_ui_field_edit_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['klaviyo']['person_attribute']) && $attribute_key = $values['klaviyo']['person_attribute']) {
    $attributes = variable_get('klaviyo_person_attributes_user', array());
    if ($attribute_key === '_none' && !empty($attributes[$form['#field']['field_name']])) {
      unset($attributes[$form['#field']['field_name']]);
    }
    else {
      $attributes[$form['#field']['field_name']] = $attribute_key;
    }
    variable_set('klaviyo_person_attributes_user', $attributes);
  }
}

/**
 * Implements hook_user_insert().
 */
function klaviyo_user_insert(&$edit, $account, $category) {
  klaviyo_write_person_record('user', $account);
}

/**
 * Implements hook_user_update().
 */
function klaviyo_user_update(&$edit, $account, $category) {
  klaviyo_write_person_record('user', $account);
}

// @todo: Maybe we should add this to a queue and allow the user to register
//        later.
// @todo: If we have set a Klaviyo segment for looking up the entity we will use
//        it to look up users for updating email addresses if it changed so we
//        don't create new persons in Klaviyo for an email change.
function klaviyo_write_person_record($entity_type, $entity) {
  $klaviyo = KlaviyoAdapter::getInstance();
  $person_configuration = $klaviyo->preparePersonConfiguration($entity_type, $entity);

  try {
    $person = $klaviyo->api->model($person_configuration, 'person');
    $klaviyo->api->service('track')->identify($person);
  }
  catch(Klaviyo\Exception\KlaviyoExceptionInterface $e) {
    watchdog_exception('klaviyo', $e);
  }
}

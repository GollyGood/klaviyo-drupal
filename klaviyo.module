<?php

/**
 * @file
 */

/**
 * Implements hook_cron().
 */
function klaviyo_cron() {
  $limit = variable_get('klaviyo_sync_batch_size', 10);
  $unsynced_entities = klaviyo_get_unsynced_entities('user', $limit);

  foreach ($unsynced_entities as $entity) {
    klaviyo_sync_entity('user', $entity);
  }
}

/**
 * Implements hook_user_load().
 */
function klaviyo_user_load($users) {
  $sync_records = klaviyo_sync_record_load('user', array_keys($users));

  foreach ($sync_records as $entity_id => $sync_record) {
    $users[$entity_id]->klaviyo = $sync_record;
    $wrapper = entity_metadata_wrapper('user', $users[$entity_id]);
    $users[$entity_id]->klaviyo['klaviyo_id'] = Klaviyo::getInstance()->getKlaviyoIdentifier('user', $wrapper);
  }
}

/**
 * Implements hook_user_insert().
 */
function klaviyo_user_insert(&$edit, $account, $category) {
  klaviyo_sync_entity('user', $account);
}

/**
 * Implements hook_user_update().
 */
function klaviyo_user_update(&$edit, $account, $category) {
  klaviyo_sync_entity('user', $account);
}

/**
 * Implements hook_user_delete().
 */
function klaviyo_user_delete($account) {
  klaviyo_sync_record_delete($account->klaviyo);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function klaviyo_form_user_admin_settings_alter(&$form, $form_state) {
  $klaviyo = Klaviyo::getInstance();

  if ($klaviyo->isCompatiableEntity('user')) {
    $default_values = $klaviyo->getAllEntitySettings('user');

    $form['klaviyo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Klaviyo'),
      '#tree' => TRUE,
    );

    $form['klaviyo']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable'),
      '#default_value' => $default_values['enabled'],
      '#description' => t('Enable Klaviyo mapping for user accounts.'),
    );

    $form['klaviyo']['settings'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('klaviyo-settings')
      ),
      '#states' => array(
        'visible' => array(
          ':input[name="klaviyo[enabled]"]' => array('checked' => TRUE)
        ),
      ),
    );

    /*
      @todo: This is not yet fully implemented remove into branch.
    $form['klaviyo']['settings']['list'] = array(
      '#type' => 'select_or_other',
      '#title' => t('List/Segment'),
      '#other' => t('Create a new list'),
      '#default_value' => $default_values['settings']['list'],
      '#options' => array(
        '_none' => t('Not used'),
      ) + $klaviyo->getCachedListOptions(),
      '#description' => t("Select a list to add all Drupal user accounts. <br /> Note: If you select a segment then users will not be added as segments are dynamically generated lists."),
      $form['#submit'][] = 'klaviyo_form_user_admin_settings_alter_validate';
    );
    */

    $form['#submit'][] = 'klaviyo_form_user_admin_settings_alter_submit';
  }
}

function klaviyo_form_user_admin_settings_alter_submit(&$form, $form_state) {
  $values = $form_state['values'];

  if (!empty($values['klaviyo'])) {
    /*
      @todo: This is not yet fully implemented remove into branch.
    if (!empty($values['klaviyo']['settings']['list']) && $list_id_full = $values['klaviyo']['settings']['list']) {
      $klaviyo = Klaviyo::getInstance();

      list(, $list_id) = $klaviyo->parseFullListId($list_id_full);
      if (empty($list_id)) {
        $list = $klaviyo->api->createList($list_id_full);
        $values['klaviyo']['settings']['list'] = $klaviyo->createFullListId($list);
      }
    }
    */

    variable_set('klaviyo_entity_settings_user', $values['klaviyo']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function klaviyo_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  $klaviyo = Klaviyo::getInstance();
  $entity_type = !empty($form['instance']['entity_type']['#value']) ? $form['instance']['entity_type']['#value'] : '';
  if ($klaviyo->isFieldMappable($entity_type, $form['#field']['type'])) {
    $form['klaviyo'] = array(
     '#type' => 'fieldset',
     '#title' => t('Klaviyo'),
     '#tree' => TRUE,
    );

    $attributes = variable_get('klaviyo_person_attributes_user', array());
    $default_value = !empty($attributes[$form['#field']['field_name']]) ? $attributes[$form['#field']['field_name']] : '_none';
    $form['klaviyo']['person_attribute'] = array(
      '#type' => 'select_or_other',
      '#title' => t('Attribute'),
      '#other' => t('Custom'),
      '#default_value' => $default_value,
      '#options' => array(
        '_none' => t('Not used'),
      ) + $klaviyo->getPersonMappableAttributeOptions('user', $form['#field']['field_name']),
      '#description' => t('Select the attribute for which this field should map in Klaviyo, if any.'),
    );

    $form['#validate'][] = 'klaviyo_form_field_ui_field_edit_form_validate';
    $form['#submit'][] = 'klaviyo_form_field_ui_field_edit_form_submit';
  }
}

function klaviyo_form_field_ui_field_edit_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['klaviyo']['person_attribute']) && $attribute_key = $values['klaviyo']['person_attribute']) {
    // @todo: Check that it is not already used.
    // @todo: Check that it is a clean string < 125 chars (or max variable size?).
  }
}

function klaviyo_form_field_ui_field_edit_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['klaviyo']['person_attribute']) && $attribute_key = $values['klaviyo']['person_attribute']) {
    $attributes = variable_get('klaviyo_person_attributes_user', array());
    if ($attribute_key === '_none' && !empty($attributes[$form['#field']['field_name']])) {
      unset($attributes[$form['#field']['field_name']]);
    }
    else {
      $attributes[$form['#field']['field_name']] = $attribute_key;
    }
    variable_set('klaviyo_person_attributes_user', $attributes);
  }
}

function klaviyo_sync_entity($entity_type, $entity) {
  $klaviyo = Klaviyo::getInstance();

  if (!$klaviyo->isEnabledOnEntity($entity_type)) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $successful = $klaviyo->saveEntity($entity_type, $wrapper);

  $sync_record = klaviyo_sync_prepare_from_entity($entity_type, $wrapper);

  if ($successful) {
    $sync_record['synced'] = 1;
    $sync_record['updated'] = REQUEST_TIME;
  }
  else {
    $sync_record['synced'] = 0;
  }

  return kalviyo_sync_record_save($sync_record);
}

function klaviyo_sync_prepare_from_entity($entity_type, EntityMetadataWrapper $wrapper) {
  $sync_record = array();

  if (!empty($wrapper->value()->klaviyo)) {
    $sync_record = $wrapper->value()->klaviyo;
  }

  $sync_record += array(
    'entity_type' => $entity_type,
    'entity_bundle' => $wrapper->getBundle(),
    'entity_id' => $wrapper->getIdentifier(),
    'created' => REQUEST_TIME,
    'synced' => 0,
  );

  // klaviyo_is is a derived value.
  // @see Klaviyo::getEntityKlaviyoIdentifier().
  if (isset($sync_record['klaviyo_id'])) {
    unset($sync_record['klaviyo_id']);
  }
  return $sync_record;
}

function kalviyo_sync_record_save($sync_record) {
  $existing_record = klaviyo_sync_record_load('user', array($sync_record['entity_id']));
  if (!empty($existing_record) && $existing_record = reset($existing_record)) {
    $sync_record += $existing_record;
  }

  $successful = FALSE;
  if (empty($existing_record)) {
    $successful = (bool) klaviyo_sync_record_insert($sync_record);
  }
  else {
    $successful = (bool) klaviyo_sync_record_update($sync_record);
  }

  return !empty($successful) ? $sync_record : array();
}

function klaviyo_sync_record_load($entity_type, $entity_ids = array()) {
  $select = db_select('klaviyo', 'k');
  $select->fields('k');

  $select->condition('entity_type', $entity_type);
  $select->condition('entity_id', $entity_ids, 'IN');

  return $select->execute()->fetchAllAssoc('entity_id', PDO::FETCH_ASSOC);
}

function klaviyo_sync_record_insert($sync_record) {
  $return_value = NULL;
  $sync_record['updated'] = REQUEST_TIME;

  try {
    $return_value = db_insert('klaviyo')
      ->fields($sync_record)
      ->execute();
  }
  catch (Exception $e) {
    watchdog_exception('klaviyo', $e);
  }

  return $return_value;
}

function klaviyo_sync_record_update($sync_record) {
  $count = 0;

  try {
    $count = db_update('klaviyo')
      ->fields($sync_record)
      ->condition('entity_type', $sync_record['entity_type'])
      ->condition('entity_id', $sync_record['entity_id'])
      ->execute();
  }
  catch (Exception $e) {
    watchdog_exception('klaviyo', $e);
  }

  return $count;
}

function klaviyo_sync_record_delete($sync_record) {
  db_delete('klaviyo')
    ->condition('entity_type', $sync_record['entity_type'])
    ->condition('entity_id', $sync_record['entity_id'])
    ->execute();
}

function klaviyo_get_unsynced_entities($entity_type, $limit = 0) {
  $select = db_select('klaviyo', 'k');
  $select->fields('k', array('entity_id'));

  $select->condition('entity_type', $entity_type);
  $select->condition('synced', 0);

  if ($limit) {
    $select->range(0, $limit);
  }
  $entity_ids = array_keys($select->execute()->fetchAllAssoc('entity_id', PDO::FETCH_ASSOC));
  return user_load_multiple($entity_ids);
}
